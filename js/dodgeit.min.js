// window.requestAnimationFrame         
if (!window.requestAnimationFrame)
{
    window.requestAnimationFrame = (function()
    {
        return window.webkitRequestAnimationFrame ||
               window.mozRequestAnimationFrame ||
               window.oRequestAnimationFrame ||
               window.msRequestAnimationFrame ||
               function(callback, element)
               {
                  window.setTimeout(callback, 1000 / 60);
               };
    })();
} 

// random range
Math.randomRange = function(min, max)
{
    return Math.random() * (max - min) + min;
};

// weighted random
Math.randomWeighted = function(data)
{
    var total = data.reduce(function(pv, cv) { return pv + cv; }, 0);

    var rand = Math.randomRange(0, total);
    var cur = 0;
    for (var i = 0; i <= data.length - 1; i++)
    {
        cur += data[i];
        if (rand < cur)
        {
            return i;
        }
    }
};
$(function() {

var DodgeIt = (function()
{
    // FUNCTIONS
    // allowed to save?
    var allowSaving = false;

    // load settings function
    var load = function()
    {
        allowSaving = false;

        // load
        var data = localStorage.getItem("options");
        try
        {
            data = JSON.parse(data);
        }
        catch (e)
        {
            return;
        }

        if (data)
        {   
            // audio
            if (data.audio)
            {
                Audio.music.mute   = data.audio.music.mute;
                Audio.music.volume = data.audio.music.volume;

                Audio.sfx.mute     = data.audio.sfx.mute;
                Audio.sfx.volume   = data.audio.sfx.volume;
            }

            // options
            if (data.options)
            {
                this.options.name       = (data.options.name)  ? data.options.name  : this.options.name;
                this.options.car        = (data.options.car)   ? data.options.car   : this.options.car;
                this.options.speed      = (data.options.speed) ? data.options.speed : this.options.speed;
            }
        }

        this.allowSaving = true;
    };

    // save settings function
    var save = function()
    {
        if (this.allowSaving)
        {
            var data = {
                // audio
                audio: {
                    music: {
                        mute:   Audio.music.mute,
                        volume: Audio.music.volume
                    },

                    sfx: {
                        mute:   Audio.sfx.mute,
                        volume: Audio.sfx.volume
                    }
                },
                
                // controls
                controls: {},

                // options
                options: {
                    name:   this.options.name,
                    style:  this.options.car,
                    speed:  this.options.speed
                }
            };

            // save
            localStorage.setItem("options", JSON.stringify(data));            
        }
    };

    // INIT
    // options (default)
    var options = {
        name:   "Unknown",
        style:  "car",
        speed:  300
    };

    // set container / hide
    var container = $("div#game");
    container.children().hide();

    // load options
    load();

    // RETURN
    return {
        container:  container,

        options:    options,

        load:       load,
        save:       save
    };
})();
var Audio = {
    music: (function()
    {
        // VARS
        var max = 10;

        var tracks = [
            "music/01_A_Night_Of_Dizzy_Spells.mp3",
            "music/02_Underclocked_(underunderclocked_mix).mp3",
            "music/03_Chibi_Ninja.mp3"
        ];
        var track_cur = -1;
        var audioElement = null;

        // FUNCTIONS
        var nexttrack = function()
        {
            if (track_cur == -1)
            {
                 track_cur = Math.floor(Math.random() * tracks.length);
            }
            else
            {
                track_cur = (track_cur + 1) % tracks.length;
            }

            audioElement.get(0).pause();
            audioElement
                .empty()
                .append(
                    $("<source>")
                        .attr("src", tracks[track_cur])
                        .attr("type", "audio/mpeg")
                );
            audioElement.get(0).play();
        };

        // INIT
        // audio element
        audioElement = $("<audio></audio").bind("ended", function()
        {
            nexttrack();
        });

        var options = {};

        // mute / volume
        Object.defineProperty(options, "mute", {
            get: function()
            {
                return audioElement.get(0).muted;
            },
            set: function(value)
            {
                audioElement.get(0).muted = value;
                DodgeIt.save();
            }
        });
        options.mute = false;

        Object.defineProperty(options, "volume", {
            get: function()
            {
                return audioElement.get(0).volume * max;
            },
            set: function(value)
            {
                if (value >= 0 && value <= this.max)
                {
                    audioElement.get(0).volume = value / max;
                }
                DodgeIt.save();
            }
        });
        options.volume = 5;

        // start music
        nexttrack();

        // RETURN
        return {
            options: options,
            nexttrack: nexttrack
        };
    })(),
    sfx: {
        options: {
            mute: false,
            volume: 5            
        },
        max: 10,

        init: function()
        {
            // mute / volume
            Object.defineProperty(this, "mute", {
                get: function()
                {
                    return this.options.mute;
                },
                set: function(value)
                {
                    this.options.mute = value;
                    DodgeIt.save();
                }
            });
            this.mute = false;

            Object.defineProperty(this, "volume", {
                get: function()
                {
                    return this.options.volume;
                },
                set: function(value)
                {
                    this.options.volume = value;
                    DodgeIt.save();
                }
            });
            this.volume = 5;
        },

        play: function()
        {

        }
    }
};
var Leaderboard = {
    post: function(name, score)
    {
        var url = "https://docs.google.com/forms/d/1O4OfBssi1MZZd1v7gfo_bsyU_r52IVSN8GEYH1I2Luo/formResponse";
        $.post(url, {
            "entry.1065023134": name,
            "entry.1650551768": score
        });
    },

    get: function(start, count, table)
    {
        var that = this;

        // loading
        table
            .empty()
            .append(
                $("<tr></tr>")
                    .addClass("loading")
                    .append(
                        $("<td></td>")
                            .attr("colspan", 3)
                            .html("Loading...")
                    )
                );

        // get data
        var table_key = "1bWUyCx4cLJn6EXe_0Y8NxJ3iJhjqMM5pHfSCEuVD8Ec";
        $.ajax({
            url: "https://docs.google.com/spreadsheets/d/"+table_key+"/gviz/tq?",

            dataType: "jsonp",
            type: "GET",
            cache: false,

            data: {
                tq:     "select B, C order by C desc",
                tqx:    "responseHandler:success"
            },

            success: function(responseText)
            {
                var data = [];
                $.each(responseText.table.rows, function(index, value)
                {
                    data.push({
                        name:   value.c[0].v,
                        score:  value.c[1].v
                    });
                });

                // clear table
                table.empty();

                // filter items
                var output = [];
                for (var i = start; i - start <= count - 1; i++)
                {
                    if (i <= data.length - 1)
                    {
                        $("<tr></tr>")
                            .appendTo(table)
                            .append($("<td></td>").html(i + 1))
                            .append($("<td></td>").html(data[i].name))
                            .append($("<td></td>").html(data[i].score));                        
                    }
                    else
                    {
                        // add empty row
                        $("<tr></tr>")
                            .appendTo(table)
                            .append("<td>&nbsp;</td>")
                            .append("<td>&nbsp;</td>")
                            .append("<td>&nbsp;</td>");
                    }

                };

                // add buttons
                var tr_button = $("<tr></tr>").appendTo(table).addClass("buttons");
                var td_1 = $("<td></td>").attr("colspan", 2).appendTo(tr_button);
                var td_2 = $("<td></td>").appendTo(tr_button);

                // prev
                if (start != 0)
                {
                    td_1.append(
                        $("<button></button>")
                            .html("previous " + count)
                            .click(function()
                            {
                                that.get(start - count, count, table);
                            })
                    );
                }

                // next
                if (data.length >= start + count)
                {
                    td_2.append(
                        $("<button></button>")
                            .html("next " + count)
                            .click(function()
                            {
                                that.get(start + count, count, table);
                            })
                    );
                }
            },

            jsonpCallback: "success"
        });
    }
};
var Controls = (function()
{
    var options = {
        command:    {},
        gamepad: {
            buttons:    [],
            axes:       [],

            axes_selected: 0,
            timestamp:  0,
            available:  false
        },

        orientation: {
            beta:       null,
            gamma:      null,
            available:  false
        },

        set: {
            active:     false,
            key:        "",
            abort:      {
                // Escape
                device: "keyboard",
                type:   null,
                code:   27
            },
            callback:   null
        }
    };

    // FUNCTIONS
    var command = function(command)
    {
        command = options.command[command];

        var call = function()
        {
            command.fn();
        };

        var set = function(fn)
        {
            command.fn = fn;
        };

        return {
            call:   call,
            set:    set,

            pressed: command.pressed
        };
    };

    var ondown = function(control)
    {
        var toReturn = true;
        if (!options.set.active)
        {
            $.each(options.command, function(commandIndex, command)
            {
                if (command.device == control.device &&
                    command.type   == control.type &&
                    command.code   == control.code)
                {
                    command.pressed = true;
                    command.fn();
                    toReturn = false;
                    return false;
                }
            });
        }
        else
        {
            // set control
            if (options.set.abort.device != control.device ||
                options.set.abort.type   != control.type ||
                options.set.abort.code   != control.code)
            {
                options.command[options.set.key].device = control.device;
                options.command[options.set.key].type   = control.type;
                options.command[options.set.key].code   = control.code;
                options.set.callback(control);
            }
            else
            {
                options.set.callback(null);
            }
            options.set.active = false;

            toReturn = false;
        }
        return toReturn;
    };

    var onup = function(control)
    {
        var toReturn = true;
        $.each(options.command, function(commandIndex, command)
        {
            if (command.device == control.device &&
                command.type   == control.type &&
                command.code   == control.code)
            {
                command.pressed = false;
                toReturn = false;
                return false;
            }
        });

        return toReturn;
    };

    var format = function(control)
    {
        if (control.device == "keyboard")
        {
            var keycodes = {
                 37:    "Arrow Left",
                 38:    "Arrow Up",
                 39:    "Arrow Right",
                 40:    "Arrow Down",
                 45:    "Insert",
                 46:    "Delete",
                  8:    "Backspace",
                  9:    "Tab",
                 13:    "Enter",
                 16:    "Shift",
                 17:    "Ctrl",
                 18:    "Alt",
                 19:    "Pause",
                 20:    "Caps Lock",
                 27:    "Escape",
                 32:    "Space",
                 33:    "Page Up",
                 34:    "Page Down",
                 35:    "End",
                 36:    "Home",
                112:    "F1",
                113:    "F2",
                114:    "F3",
                115:    "F4",
                116:    "F5",
                117:    "F6",
                118:    "F7",
                119:    "F8",
                120:    "F9",
                121:    "F10",
                122:    "F11",
                123:    "F12",
                144:    "Num Lock",
                145:    "Scroll Lock",
                186:    "Semicolon",
                187:    "Equal",
                188:    "Comma",
                189:    "Dash",
                190:    "Period",
                191:    "Slash",
                192:    "Grave Accent",
                219:    "Open Bracket",
                220:    "Backslash",
                221:    "Close Braket",
                222:    "Single Quote"
            };

            if (control.code >= 48 && control.code <= 90)
            {
                return "Keyboard " + String.fromCharCode(control.code).toLowerCase();   
            } 
            else
            {
                return "Keyboard " + keycodes[control.code];
            }
        }
        else if (control.device == "gamepad" &&
                 control.type   == "button")
        {
            return "Gamepad Button " + control.code;
        }
        else if (control.device == "gamepad" &&
                 control.type.match(/axes-\d/))
        {
            return "Gamepad Axes " + control.code;
        }
        else
        {
            return "";
        }
    };

    var set = function(key, callback)
    {
        options.set.key = key;
        options.set.callback = callback;
        options.set.active = true;   
    };

    var reset = function()
    {
        var that = this;
        $.each(options.command, function(index, value)
        {
            that.command(index).set(function() {});
        });        
    };

    // axes
    var axes = function(axis)
    {
        var output = {x: 0, y: 0};
        if (options.gamepad.available)
        {
            if (axis == undefined)
            {
                axis = options.axes_selected;
            }
            output = this.gamepad.axes(axis);
        }

        if (output.x == 0 && output.y == 0 &&
            options.orientation.available)
        {
            output = this.orientation.axes();
        }

        return output;
    };

    // gamepad
    var gamepad_axes = function(axis)
    {
        var gamepad = navigator.getGamepads()[0];
        if (gamepad && gamepad != undefined &&
            gamepad.axes[axis * 2] &&
            gamepad.axes[(axis * 2) + 1])
        {
            var axes = {
                x: gamepad.axes[axis * 2],
                y: gamepad.axes[(axis * 2) + 1]
            };

            var adapt = function(value)
            {
                var border = {
                    min: 0.1,
                    max: 0.8
                }

                if (Math.abs(value) < border.min)
                {
                    return 0;
                }
                else if (value > border.max)
                {
                    return 1;
                }
                else if (value < -border.max)
                {
                    return -1;
                }
                else if (value > 0)
                {
                    return (value - border.min) / border.max;
                }
                else
                {
                    return (value + border.min) / border.max;
                }
            };
            axes.x = adapt(axes.x);
            axes.y = adapt(axes.y);

            return axes;
        }
        else
        {
            return {x: 0, y: 0};
        }
    };

    var gamepad_poll = function(all)
    {
        var gamepad_update_status = function(gamepad)
        {
            options.gamepad.timestamp = gamepad.timestamp;

            // axes
            for (var i = 0; i <= (gamepad.axes.length / 2) - 1; i++)
            {
                options.gamepad.axes[i] = axes(i);            
            }
        };

        var gamepad_axis_trigger = function(prev, cur, border, down, up)
        {
            if (
                (border > 0 && prev < border && cur >= border) ||
                (border < 0 && prev > border && cur <= border)
                )
            {
                down();
            }
            else if (
                     (border > 0 && prev >= border && cur < border) ||
                     (border < 0 && prev <= border && cur > border)
                    )
            {
                up();
            }
        };

        var gamepad = navigator.getGamepads()[0];
        if (gamepad && gamepad != undefined &&
            gamepad.timestamp != options.gamepad.timestamp)
        {
            if (all)
            {
                // buttons          
                $.each(gamepad.buttons, function(buttonIndex, button)
                {
                    if (!options.gamepad.buttons[buttonIndex] && button.pressed)
                    {
                        ondown({device: "gamepad", type: "button", code: buttonIndex});
                        button.pressed = false;
                    }
                    else if (options.gamepad.buttons[buttonIndex] && !button.pressed)
                    {
                        onup({device: "gamepad", type: "button", code: buttonIndex});
                        button.pressed = true;
                    }
                });

                // axes
                for (var i = 0; i <= options.gamepad.axes.length - 1; i++)
                {
                    var prev = options.gamepad.axes[i];
                    var cur  = this.axes(i);

                    var border = 0.5;
                    gamepad_axis_trigger(prev.y, cur.y, border,
                                         function() { ondown({device: "gamepad", type: "axes-" + i, code: "0"}); },
                                         function() { onup(  {device: "gamepad", type: "axes-" + i, code: "0"}); }
                                         );
                    gamepad_axis_trigger(prev.y, cur.y, -border,
                                         function() { ondown({device: "gamepad", type: "axes-" + i, code: "1"}); },
                                         function() { onup(  {device: "gamepad", type: "axes-" + i, code: "1"}); }
                                         );
                    gamepad_axis_trigger(prev.x, cur.x,  border,
                                         function() { ondown({device: "gamepad", type: "axes-" + i, code: "2"}); },
                                         function() { onup(  {device: "gamepad", type: "axes-" + i, code: "2"}); }
                                         );
                    gamepad_axis_trigger(prev.x, cur.x, -border,
                                         function() { ondown({device: "gamepad", type: "axes-" + i, code: "3"}); },
                                         function() { onup(  {device: "gamepad", type: "axes-" + i, code: "3"}); }
                                         );
                };

                // update gamepad
                gamepad_update_status(gamepad);
            }
            else
            {
                // commands
                $.each(options.command, function(commandIndex, command)
                {
                    if (command.device == "gamepad")
                    {
                        var down    = function() { ondown(command); };
                        var up      = function() { onup(command); };

                        if (command.type == "button")
                        {       
                            if (command.pressed != gamepad.buttons[command.code].pressed)
                            {
                                if (!command.pressed)
                                {
                                    down();
                                }
                                else
                                {
                                    up();
                                }
                            }
                        }
                        else if (command.type.match(/axes-\d/))
                        {
                            var axis_id = (/axes-(\d)/.exec(command.type))[1];
                            if (options.gamepad.axes[axis_id])
                            {
                                var border = (command.code % 2 == 0) ? 0.5 : -0.5;

                                var cur, prev;
                                if (command.code == 2 || command.code == 3)
                                {                         
                                    prev = options.gamepad.axes[axis_id].x;           
                                    cur  = gamepad_axes(axis_id).x;
                                }
                                else
                                {
                                    prev = options.gamepad.axes[axis_id].y;
                                    cur  = gamepad_axes(axis_id).y;
                                }
                                gamepad_axis_trigger(prev, cur, border, down, up);
                            }              
                        }
                    }
                });

                // update status
                gamepad_update_status(gamepad);
            }
        }
    };

    // orientation
    var orientation_axes = function()
    {
        var that = Controls;

        var x;
        x = options.orientation.gamma / 30;
        x = Math.min(1, x);
        x = Math.max(-1, x);

        var y;
        y = options.orientation.beta / 30;
        y = Math.min(1, y);
        y = Math.max(-1, y);
        
        return {x: x, y: y};
    };

    // axes
    var axes = function(axis)
    {
        var output = {x: 0, y: 0};
        if (options.gamepad.available)
        {
            if (axis == undefined)
            {
                axis = options.axes_selected;
            }
            output = gamepad_axes(axis);
        }

        if (output.x == 0 && output.y == 0 &&
            options.orientation.available)
        {
            output = orientation_axes();
        }

        return output;
    };

    // INIT
    // default keys
    var keys = {
        "up":       38,
        "down":     40,
        "left":     37,
        "right":    39,
        "enter":    13,
        "back":     8
    };

    // set keys
    $.each(keys, function(index, value)
    {
        options.command[index] = {
            fn: function() {},

            device:     "keyboard", // keyboard or gamepad
            type:       null,       // gamepad: button or stick
            code:       value,
            pressed:    false
        };
    });

    // keydown
    $(document).keydown(function(event)
    { 
        if (!ondown({device: "keyboard", type: null, code: event.keyCode}))
        {
            event.preventDefault();
            return false;
        }
        else
        {
            return true;
        }
    });

    // keyup
    $(document).keyup(function(event)
    {
        if (!onup({device: "keyboard", type: null, code: event.keyCode}))
        {
            event.preventDefault();
            return false;
        }
        else
        {
            return true;
        }
    });

    // gamepad
    // navigator.getGamepads
    options.gamepad.available = (navigator.getGamepads || navigator.webkitGamepads);
    if (!navigator.getGamepads)
    {
        navigator.getGamepads = function()
        {
            return (navigator.webkitGamepads) ? navigator.webkitGamepads : (function() { return []; });
        };
    }

    // poll
    gamepad_poll(true);

    // mobile - device orientation
    options.orientation.available = (!!window.DeviceOrientationEvent)
    window.addEventListener("deviceorientation", function(event)
    {
        options.orientation.beta  = event.beta;
        options.orientation.gamma = event.gamma;
    }, true);

    // RETURN
    return {
        options:    options,

        command:    command,
        format:     format,
        ondown:     ondown,
        onup:       onup,
        reset:      reset,
        set:        set,

        axes:   axes,
        gamepad: {
            axes:   gamepad_axes,
            poll:   gamepad_poll
        },
        orientation: {
            axes:   orientation_axes
        }
    };
})();
var Screen = (function()
{
    // SCREENS
    var screens = {
        "menu": (function()
        {
            // INIT
            var container = $("div#menu", DodgeIt.container);

            $("span", container).hover(function()
            {
                $(this).siblings().removeClass("selected");
                $(this).addClass("selected");
            });

            $("span", container).click(function()
            {
                Screen.show($(this).attr("data-screen"));
            });

            $("span:first", container).addClass("selected");
            
            // FUNCTIONS
            var showBefore = function()
            {
                Controls.command("enter").set(function()
                {
                    $("span.selected", container).click();
                });

                Controls.command("up").set(function()
                {
                    var selected = $("span.selected", container);
                    selected.removeClass("selected");
                    if (selected.prevAll().length > 0)
                    {
                        selected.prev().addClass("selected");
                    }
                    else
                    {
                        selected.parent().children().last().addClass("selected");   
                    }
                });

                Controls.command("down").set(function()
                {
                    var selected = $("span.selected", container);
                    selected.removeClass("selected");
                    if (selected.nextAll().length > 0)
                    {
                        selected.next().addClass("selected");
                    }
                    else
                    {
                        selected.parent().children().first().addClass("selected");   
                    }
                });
            };

            var showAfter = function()
            {

            };

            var loop = function()
            {
                Controls.gamepad.poll(false);
            };

            // RETURN
            return {
                container:  container,
                showBefore: showBefore,
                showAfter:  showAfter,
                loop:       loop
            };
        })(),

        "gameplay": (function()
        {
            // INIT
            var container = $("div#gameplay", DodgeIt.container);
            
            // FUNCTIONS
            var showBefore = function()
            {
                // controls
                Controls.command("back").set(function()
                {
                    Gameplay.pause();
                });

                // init
                Gameplay.init();
            };

            var showAfter = function()
            {
                Gameplay.start();
            };

            var loop = function()
            {
                Controls.gamepad.poll(false);
            };

            // RETURN
            return {
                container:  container,
                showBefore: showBefore,
                showAfter:  showAfter,
                loop:       loop
            };
        })(),

        "leaderboard": (function()
        {
            // INIT
            var container = $("div#leaderboard", DodgeIt.container);
            
            // back
            $("span.back", container).click(function()
            {
                Screen.show("menu");
            });
            
            // FUNCTIONS
            var showBefore = function()
            {
                // back
                Controls.command("back").set(function()
                {
                    Screen.show("menu");
                });

                // load
                Leaderboard.get(0, 10, $("table", container));
            };

            var showAfter = function() { };

            var loop = function()
            {
                Controls.gamepad.poll(false);
            };

            // RETURN
            return {
                container:  container,
                showBefore: showBefore,
                showAfter:  showAfter,
                loop:       loop
            };
        })(),

        "gameplay-gameover": (function()
        {
            // INIT
            var container = $("div#gameplay-gameover", DodgeIt.container);
            
            // hover 
            $("table", container).delegate("td", "mouseover", function(v)
            {
                $("table tr td", container).removeClass("selected");
                $(this).addClass("selected");
            });

            // click
            $("table", container).delegate("td", "click", function()
            {
                var input = $("input[type=text]", container);
                switch ($(this).attr("data-action"))
                {
                    case "add":
                        if (input.prop("maxlength") > input.val().length)
                        {
                            input.val(input.val() + $(this).attr("data-symbol" + ($("td[data-action=shift]", container).attr("data-pressed") == "true" ? "1" : "2") ));
                        }
                        break;
                    case "shift":
                        // change pressed-state
                        var pressed = $(this).attr("data-pressed");
                        pressed = (pressed == "true" ? "false" : "true");
                        $(this).attr("data-pressed", pressed);

                        var symbols = $("table tr td[data-action=add]", container);
                        $.each(symbols, function(index, symbol)
                        {
                            symbol = $(symbol);
                            if (pressed == "true")
                            {
                                symbol.html(symbol.html().toUpperCase());
                            }
                            else
                            {
                                symbol.html(symbol.html().toLowerCase());
                            }
                        });
                        break;
                    case "delete":
                        input.val(input.val().slice(0, -1));
                        break;
                    case "cancel":
                        Screen.show("gameplay-restart");
                        break;
                    case "submit":
                        Leaderboard.post(input.val(), $("span.score", container).html());
                        DodgeIt.options.name = input.val(); DodgeIt.save();
                        Screen.show("gameplay-restart");
                        break;
                    default:
                        break;
                }
            });

            var showBefore = function(args)
            {
                // controls
                Controls.command("up").set(function()
                {
                    var selected = $("table tr td.selected", container);
                    if (selected.parent().prevAll().length > 0)
                    {
                        // calc child_id
                        var child_id = 1;
                        $.each(selected.prevAll(), function(index, value)
                        {
                            child_id += $(value).prop("colspan");
                        });

                        // select
                        selected.removeClass("selected");

                        var selected_new = selected.parent().prev().children().first();
                        while (child_id > 0)
                        {
                            var tmp = selected_new.prop("colspan");
                            if (child_id > selected_new.prop("colspan"))
                            {
                                selected_new = selected_new.next();
                            }

                            child_id -= tmp;
                        }

                        selected_new.addClass("selected");
                    }
                });

                Controls.command("down").set(function()
                {
                    var selected = $("table tr td.selected", container);
                    if (selected.parent().nextAll().length > 0)
                    {
                        // calc child_id
                        var child_id = 1;
                        $.each(selected.prevAll(), function(index, value)
                        {
                            child_id += $(value).prop("colspan");
                        });

                        // select
                        selected.removeClass("selected");

                        var selected_new = selected.parent().next().children().first();
                        while (child_id > 0)
                        {
                            var tmp = selected_new.prop("colspan");
                            if (child_id > selected_new.prop("colspan"))
                            {
                                selected_new = selected_new.next();
                            }

                            child_id -= tmp;
                        }

                        selected_new.addClass("selected");
                    }
                });

                Controls.command("left").set(function()
                {
                    var selected = $("table tr td.selected", container);
                    if (selected.prevAll().length > 0)
                    {
                        selected.removeClass("selected");
                        selected.prev().addClass("selected");
                    }
                });

                Controls.command("right").set(function()
                {
                    var selected = $("table tr td.selected", container);
                    if (selected.nextAll().length > 0)
                    {
                        selected.removeClass("selected");
                        selected.next().addClass("selected");
                    }
                });

                Controls.command("enter").set(function()
                {
                    $("table tr td.selected", container).click();
                });

                Controls.command("back").set(function()
                {
                    var input = $("input[type=text]", container);
                    input.val(input.val().slice(0, -1));
                });

                // select first
                $("table tr td.selected", container).removeClass("selected");
                $("table tr:nth-child(1) td:nth-child(1)", container).addClass("selected");

                // set score
                $("span.score", container).html(args);

                // set name
                $("input[type=text]", container).val(DodgeIt.options.name);
            };

            var showAfter = function()
            {

            };

            var loop = function()
            {
                Controls.gamepad.poll(false);
            };

            // RETURN
            return {
                container:  container,
                showBefore: showBefore,
                showAfter:  showAfter,
                loop:       loop
            };
        })(),

        "gameplay-restart": (function()
        {
            // INIT
            var container = $("div#gameplay-restart", DodgeIt.container);
            
            $("div span:nth-child(1)", container).click(function(event)
            {
                Screen.show("gameplay");
            });
            $("div span:nth-child(2)", container).click(function(event)
            {
                Screen.show("menu");
            });

            $("div span", container).hover(function()
            {   
                $(this).siblings().removeClass("selected");
                $(this).addClass("selected");
            });

            // back
            $("span.back", container).click(function()
            {
                Screen.show("menu");
            });
            
            // FUNCTIONS
            var showBefore = function()
            {
                Controls.command("left").set(function()
                {
                    $("div span:nth-child(1)", container).addClass("selected");
                    $("div span:nth-child(2)", container).removeClass("selected");
                });

                Controls.command("right").set(function()
                {
                    $("div span:nth-child(1)", container).removeClass("selected");
                    $("div span:nth-child(2)", container).addClass("selected");
                });

                Controls.command("enter").set(function()
                {
                    $("div span.selected", container).click();
                });

                // select Yes
                $("div span:nth-child(1)", container).addClass("selected");
                $("div span:nth-child(2)", container).removeClass("selected");
            };

            var showAfter = function()
            {

            };

            var loop = function()
            {
                Controls.gamepad.poll(false);
            };

            // RETURN
            return {
                container:  container,
                showBefore: showBefore,
                showAfter:  showAfter,
                loop:       loop
            };
        })(),

        "controls": (function()
        {
            // INIT
            var container = $("div#controls", DodgeIt.container);
            
            // gamepad
            if (!Controls.options.gamepad.available)
            {
                $("tr[data-control=gamepad]", container).hide();   
            }

            // orientation
            if (!Controls.options.orientation.available)
            {
                $("tr[data-control=orientation]", container).hide();    
            }

            // back
            $("span.back", container).click(function()
            {
                Screen.show("menu");
            });
            
            // FUNCTIONS
            var showBefore = function()
            {
                Controls.command("back").set(function()
                {
                    Screen.show("menu");
                });

                // poll gamepad
                Controls.gamepad.poll(true);

                // set keys
                $.each($("span[data-command]", container), function()
                {
                    $(this).html(Controls.format(Controls.options.command[$(this).attr("data-command")]));
                });

                // set change action
                var that = this;
                $("tr[data-option=command] td button", container).click(function()
                {
                    // block buttons
                    $("button", $(this).parent().parent().siblings().andSelf()).prop("disabled", true);

                    // text
                    var textContainer = $("span[data-command=" + $(this).attr("data-command") + "]");
                    var tmp = textContainer.html();
                    textContainer.html("Please press a key... Esc to cancel")

                    Controls.set($(this).attr("data-command"), function(control)
                    {
                        // text
                        if (control != null)
                        {
                            textContainer.html(Controls.format(control));
                        }
                        else
                        {
                            textContainer.html(tmp);
                        }

                        // unblock buttons
                        $("button", container).prop("disabled", false);
                    });
                });
            };

            var showAfter = function() { };

            var loop = function()
            {
                var that = this;

                // gamepad
                if (Controls.options.gamepad.available)
                {
                    Controls.gamepad.poll(true);
                    
                    if (Controls.options.gamepad.axes.length != $("tr[data-control=gamepad] td:nth-child(2) label", container).length)
                    {
                        // create dom
                        $("tr[data-control=gamepad] td:nth-child(2)", container).html("");

                        $.each(Controls.options.gamepad.axes, function(index, axes)
                        {
                            $("tr[data-control=gamepad] td:nth-child(2)", that.container).append(
                                $("<label></label>")
                                    .append(
                                        $("<input>")
                                            .attr("type", "radio")
                                            .attr("name", "controls-gamepad-move")
                                            .change(function(event)
                                            {
                                                Controls.options.gamepad.axes_selected = $(this).parent().parent().prevAll().length;
                                            })
                                    )
                                    .append(
                                        $("<progress></progress>")
                                            .attr("min", 0)
                                            .attr("max", 2)
                                            .val(axes.x + 1)
                                    )
                                    .append(
                                        $("<progress></progress>")
                                            .attr("min", 0)
                                            .attr("max", 2)
                                            .val(axes.y + 1)
                                    )
                            );
                        });

                        // select
                        if (Controls.options.gamepad.axes_selected > Controls.options.gamepad.axes.length - 1)
                        {
                            Controls.options.gamepad.axes_selected = 0;
                        }
                        $("tr[data-control=gamepad] td:nth-child(2) label:nth-child(" + (Controls.options.gamepad.axes_selected + 1) + ") input[type=radio]", that.container).prop("checked", true);
                    }


                    // update progress bars
                    $.each(Controls.options.gamepad.axes, function(index, axes)
                    {
                        $("tr[data-control=gamepad] td:nth-child(2) label:nth-child(" + (index + 1) + ") progress:nth-child(2)", that.container).val(axes.x + 1);
                        $("tr[data-control=gamepad] td:nth-child(2) label:nth-child(" + (index + 1) + ") progress:nth-child(3)", that.container).val(axes.y + 1);
                    });
                }

                // mobile device orientation
                if (Controls.options.orientation.available)
                {
                    $("progress[data-control=orientation]:nth-child(1)", that.container).val(Controls.orientation.axes().x * 30 + 30);
                    $("progress[data-control=orientation]:nth-child(2)", that.container).val(Controls.orientation.axes().y * 30 + 30);
                }
            };

            // RETURN
            return {
                container:  container,
                showBefore: showBefore,
                showAfter:  showAfter,
                loop:       loop
            };
        })(),

        "options": (function()
        {
            // INIT
            var container = $("div#options", DodgeIt.container);
            
            $("tbody tr", container).hover(function()
            {
                $(this).siblings().removeClass("selected");
                $(this).addClass("selected");
            });

            $("input", container).on("change mousemove", function()
            {
                // style
                DodgeIt.options.style = $("input[data-option=style]:checked", container).val();

                // music
                Audio.music.options.mute   = $("input[data-option=music-mute]", container).prop("checked");
                Audio.music.options.volume = $("input[data-option=music-volume]", container).val();

                // sfx
                Audio.sfx.options.mute     = $("input[data-option=sfx-mute]", container).prop("checked");
                Audio.sfx.options.volume   = $("input[data-option=sfx-volume]", container).val();

                // speed
                DodgeIt.options.speed = $("input[data-option=speed]", container).val(); 

                // save 
                DodgeIt.save(); 
            });

            $("input[data-option=fullscreen]", container).change(function()
            {
                if (screenfull.enabled)
                {
                    if ($("input[data-option=fullscreen]", container).prop("checked"))
                    {
                        screenfull.request();
                    }
                    else
                    {
                        screenfull.exit();
                    }
                }
            });

            // back
            $("span.back", container).click(function()
            {
                Screen.show("menu");
            });
            
            // FUNCTIONS
            var showBefore = function()
            {
                // controls
                Controls.command("up").set(function()
                {
                    var selected = $("table tr.selected", container);
                    if (selected.prevAll().length > 0)
                    {
                        selected.removeClass("selected");
                        selected.prev().addClass("selected");
                    }
                });

                Controls.command("down").set(function()
                {
                    var selected = $("table tr.selected", container);
                    if (selected.nextAll().length > 0)
                    {
                        selected.removeClass("selected");
                        selected.next().addClass("selected");
                    }
                });

                Controls.command("enter").set(function()
                {
                    var checkbox = $("table tr.selected input[type=checkbox]", container);
                    if (checkbox.length == 1)
                    {
                        checkbox
                            .prop("checked", !checkbox.prop("checked"))
                            .trigger("change");
                    }
                });

                Controls.command("left").set(function()
                {
                    var tr = $("table tr.selected", container);

                    // radio
                    var radio = $("input[type=radio]:checked", tr);
                    if (radio.length == 1 &&
                        radio.parent("label").prev().length == 1)
                    {
                        radio.prop("checked", false);
                        radio.parent("label").prev().children("input[type=radio]")
                            .prop("checked", true)
                            .trigger("change");
                    }           

                    // range
                    var range = $("input[type=range]", tr);
                    if (range.length == 1)
                    {
                        var step = 1;
                        if (range.attr("step"))
                        {
                            step = parseFloat(range.attr("step"));
                        }
                        range
                            .val(parseFloat(range.val()) - step)
                            .trigger("change");;
                    }
                });

                Controls.command("right").set(function()
                {
                    var tr = $("table tr.selected", container);

                    // radio
                    var radio = $("input[type=radio]:checked", tr);
                    if (radio.length == 1 &&
                        radio.parent("label").next().length == 1)
                    {
                        radio.prop("checked", false);
                        radio.parent("label").next().children("input[type=radio]")
                            .prop("checked", true)
                            .trigger("change");;
                    }

                    // range
                    var range = $("input[type=range]", tr);
                    if (range.length == 1)
                    {
                        var step = 1;
                        if (range.attr("step"))
                        {
                            step = parseFloat(range.attr("step"));
                        }
                        range
                            .val(parseFloat(range.val()) + step)
                            .trigger("change");;
                    }
                });

                Controls.command("back").set(function()
                {
                    Screen.show("menu");
                });


                $("table tr:nth-child(1)", container).addClass("selected");

                // style
                $("input[value=" + DodgeIt.options.style + "]", container).prop("checked", true);

                // music
                $("input[data-option=music-mute]", container).prop("checked", Audio.music.options.mute);
                $("input[data-option=music-volume]", container).val(Audio.music.options.volume);

                // sfx
                $("input[data-option=sfx-mute]", container).prop("checked", Audio.sfx.options.mute);
                $("input[data-option=sfx-volume]", container).val(Audio.sfx.options.volume);

                // speed
                $("input[data-option=speed]", container).val(DodgeIt.options.speed);
            };

            var showAfter = function() { };

            var loop = function()
            {
                Controls.gamepad.poll(false);
            };

            // RETURN
            return {
                container:  container,
                showBefore: showBefore,
                showAfter:  showAfter,
                loop:       loop
            };
        })(),

        "about": (function()
        {
            // INIT
            // container
            var container = $("div#about", DodgeIt.container);
            
            // back
            $("span.back", container).click(function()
            {
                Screen.show("menu");
            });

            // FUNCTIONS
            var showBefore = function()
            {
                Controls.command("back").set(function()
                {
                    Screen.show("menu");
                });
            };

            var showAfter = function() { };
            var loop = function()
            {
                Controls.gamepad.poll(false);
            };

            // RETURN
            return {
                container:  container,
                showBefore: showBefore,
                showAfter:  showAfter,
                loop:       loop
            };
        })()
    };

    // FUNCTIONS
    var show = function(screen, args)
    {
        // reset keys
        Controls.reset();

        // get screen
        screen = screens[screen];

        // show before
        screen.showBefore(args);

        // show screen
        if (screen.container.siblings(":visible").length > 0)
        {
            screen.container.siblings(":visible").fadeOut(250, function()
            {
                screen.container.fadeIn(250);
            });
        }
        else
        {
            screen.container.show();
        }

        // loop
        if (screen.loop)
        {
            var loop = function()
            {
                var again = screen.loop();
                if (again == undefined) again = true;

                // next update
                if (screen.container.is(":visible") &&
                    again)
                {
                    window.requestAnimationFrame(loop);
                }
            }

            window.setTimeout(function() { window.requestAnimationFrame(loop); }, 500); // start getting visible
        }

        // show after
        screen.showAfter(args);
    };

    // INIT
    show("menu");

    // RETURN
    return {
        show:   show
    };
})();
var Gameplay = {
    game: null,

    init: function()
    {
        var container = $("div#gameplay", DodgeIt.container);
        container.html("");

        this.game = new Playground({
            // container
            container: container.get(0),

            // size
            width:  160 * 3,
            height: 144 * 3,

            // background
            background: {
                x: 0,  
                y: 0,

                img: null,  // set at start
                src: "",    // set at start
                width:  0,  // calculated on start
                height: 0   // calculated on start
            },

            // character
            character: {
                maxwidth:  48,
                maxheight: 48,
                x: 0,
                y: 0, // calculated on start

                img: null,  // set at start
                src: "",    // set at start
                width:  32, // calculated on start
                height: 32, // calculated on start
            },

            // obstacles
            obstacle: {
                items: [
                    {
                        img: null,          // set at start
                        src: "",            // set at start
                        src_suffix: "-1x1",
                        spawnprobability: 5,
                        create: function(game)
                        {
                            return {
                                img:    this.img,
                                x:      Math.round(Math.randomRange(0, game.width - 50)),
                                y:      -50,
                                width:  50,
                                height: 50,
                                spawntime: game.time,
                                game: game,
                                calc: function(delta) { this.y += delta * game.obstacle.speed * game.getSpeedFactor(); }
                            }
                        }
                    },
                    {
                        img: null,          // set at start
                        src: "",            // set at start
                        src_suffix: "-1x2",
                        spawnprobability: 4,
                        create: function(game)
                        {
                            return {
                                img:    this.img,
                                x:      Math.round(Math.randomRange(0, game.width - 50)),
                                y:      -100,
                                width:  50,
                                height: 100,
                                spawntime: game.time,
                                game: game,
                                calc: function(delta) { this.y += delta * game.obstacle.speed * game.getSpeedFactor(); }
                            };
                        }
                    },
                    {
                        img: null,          // set at start
                        src: "",            // set at start
                        src_suffix: "-2x1",
                        spawnprobability: 4,
                        create: function(game)
                        {
                            return {
                                img:    this.img,
                                x:      Math.round(Math.randomRange(0, game.width - 100)),
                                y:      -50,
                                width:  100,
                                height: 50,
                                spawntime: game.time,
                                game: game,
                                calc: function(delta) { this.y += delta * game.obstacle.speed * game.getSpeedFactor(); }
                            };
                        }
                    },
                    {   // moves with 2x speed
                        img: null,          // set at start
                        src: "",            // set at start
                        src_suffix: "-1x1",
                        spawnprobability: 2,
                        create: function(game)
                        {
                            return {
                                img:    this.img,
                                x:      Math.round(Math.randomRange(0, game.width - 50)),
                                y:      -50,
                                width:  50,
                                height: 50,
                                spawntime: game.time,
                                game: game,
                                calc: function(delta) { this.y += delta * game.obstacle.speed * game.getSpeedFactor() * 2; }
                            };
                        }
                    },
                    {   // moves left and right by 150px
                        img: null,          // set at start
                        src: "",            // set at start
                        src_suffix: "-1x1",
                        spawnprobability: 1,
                        create: function(game)
                        {
                            var range = 150;
                            var x = Math.round(Math.randomRange(range / 2, game.width - 50 - (range / 2)));
                            return {
                                img:    this.img,
                                x:      x, // current position
                                x_org:  x, // center of the sinus function
                                y:      -50,
                                width:  50,
                                height: 50,
                                spawntime: game.time,
                                game: game,
                                calc: function(delta)
                                {
                                    this.x  = this.x_org + Math.sin((this.spawntime - game.time) * 4) * range / 2;
                                    this.y += delta * game.obstacle.speed * game.getSpeedFactor();
                                }
                            };
                        }
                    }
                ],

                next: {
                    time: 0,
                    min:  0.5,   // min time difference
                    max:  2.5,   // max time difference
                    calc: function(time)
                    {
                        this.time = time + Math.randomRange(this.min, this.max);
                    }
                },

                speed: 100,
                speed_time: 10,     // every x seconds the speed changes
                speed_factor: 1.15  // speed change per step
            },
            obstacles: [],

            // game states
            states: {
                create:     0,
                countdown:  1,
                running:    2,
                pause:      3,
                gameover:   4
            },
            state: 0,
            prepared: false,

            // time
            time: 0,

            // score
            score: 0,
            points: {
                time: 10,
                obstacle: 0.005 // points per pixel
            },

            create: function()
            {
                // set not prepared
                this.prepared = false;

                // background image           
                this.background.src = DodgeIt.options.style + "/background";
                this.loadImages(this.background.src + ".jpg");

                // character image
                this.character.src = DodgeIt.options.style + "/character";
                this.loadImages(this.character.src);

                // obstacles
                var that2 = this;
                $.each(this.obstacle.items, function(index, value)
                {
                    that2.loadImages(DodgeIt.options.style + "/obstacle" + value.src_suffix);
                    value.src = DodgeIt.options.style + "/obstacle" + value.src_suffix;
                });

                // reset next-obstacle time
                this.obstacle.next.calc(0);

                // remove obstacles
                this.obstacles = [];

                // set time
                this.time = -3;

                // set score
                this.score = 0;
            },

            step: function(delta)
            {
                var that2 = this;

                // INIT  
                if (!this.prepared)
                {    
                    // background image
                    if (this.background.img == null)
                    {
                        this.background.img = this.images[this.background.src];

                        var scale = this.width / this.background.img.naturalWidth;
                        this.background.width  = Math.round(this.background.img.naturalWidth * scale);
                        this.background.height = Math.round(this.background.img.naturalHeight * scale);
                    }

                    // character image
                    if (this.character.img == null)
                    {
                        this.character.img = this.images[this.character.src];

                        var scaleWidth = this.character.maxwidth / this.character.img.naturalWidth;
                        var scaleHeight = this.character.maxheight / this.character.img.naturalHeight;
                        var scale = Math.min(scaleWidth, scaleHeight);
                        
                        this.character.width = Math.round(this.character.img.naturalWidth * scale);
                        this.character.height = Math.round(this.character.img.naturalHeight * scale);

                        this.character.x = (this.width - this.character.width) / 2;
                        this.character.y = this.height - this.character.height;                
                    }

                    // obstacles
                    $.each(this.obstacle.items, function(index, value)
                    {
                        value.img = that2.images[value.src];
                    });

                    // set prepared
                    this.prepared = true;
                }

                if (this.state == this.states.countdown)
                {
                    if (this.prepared)
                    {
                        // inc time
                        this.time += delta;

                        if (this.time >= 0)
                        {
                            this.state = this.states.running;
                        }
                    }
                }
                else if (this.state == this.states.running)
                {
                    // inc time
                    this.time += delta;

                    // inc score
                    this.score += delta * this.points.time;

                    // move background-image
                    this.background.y = (this.background.y + (this.obstacle.speed * delta * that2.getSpeedFactor())) % this.background.height;

                    // move character
                    Controls.gamepad.poll(false);

                    var control_speed_x = 0;
                    var control_speed_y = 0;

                    // move character - gamepad / mobile
                    control_speed_x = Controls.axes().x;
                    control_speed_y = Controls.axes().y;

                    // move character - left/right
                    if (control_speed_x == 0)
                    {
                        if (Controls.command("left").pressed && !Controls.command("right").pressed)
                        {
                            control_speed_x = -1;
                        }
                        else if (!Controls.command("left").pressed && Controls.command("right").pressed)
                        {
                            control_speed_x = 1;
                        }
                    }

                    // move character - up/down
                    if (control_speed_y == 0)
                    {
                        if (Controls.command("up").pressed && !Controls.command("down").pressed)
                        {
                            control_speed_y = -1;
                        }
                        else if (!Controls.command("up").pressed && Controls.command("down").pressed)
                        {
                            control_speed_y = 1;
                        }
                    }

                    // check new position
                    this.character.x += control_speed_x * DodgeIt.options.speed * delta;
                    this.character.x = Math.max(this.character.x, 0);
                    this.character.x = Math.min(this.character.x, this.width - this.character.width);

                    this.character.y += control_speed_y * DodgeIt.options.speed * delta;
                    this.character.y = Math.max(this.character.y, 0);
                    this.character.y = Math.min(this.character.y, this.height - this.character.height);

                    // create obstacle
                    if (this.time >= this.obstacle.next.time)
                    {
                        var spawnprobabilities = this.obstacle.items.reduce(function(pv, cv) 
                        {
                            pv.push(cv.spawnprobability);
                            return pv;
                        }, []);

                        var obstacle_id = Math.randomWeighted(spawnprobabilities);
                        this.obstacles.push(this.obstacle.items[obstacle_id].create(this));

                        // calc next spawn time
                        this.obstacle.next.calc(this.time);
                    }

                    // move obstacles / collision test
                    $.each(this.obstacles, function(index, obstacle)
                    {
                        // move
                        obstacle.calc(delta);

                        // collision test
                        if (that2.character.x < obstacle.x + obstacle.width &&
                           that2.character.x + that2.character.width > obstacle.x &&
                           that2.character.y < obstacle.y + obstacle.height &&
                           that2.character.height + that2.character.y > obstacle.y)
                        {
                            that2.collision();
                        }
                    });

                    // remove obstacles
                    this.obstacles = $.grep(this.obstacles, function(value)
                    {
                        var remove = value.y >= that2.height;
                        if (remove)
                        {
                            that2.score += that2.points.obstacle * (value.width * value.height);
                        }
                        return !remove;
                    });
                }
            },

            render: function()
            {
                var that = this;

                // clear
                this.layer.clear("#FFFFFF");

                // background-image
                var y = this.background.y - this.background.height;
                while (y < this.height)
                {
                    this.layer.drawImage(this.background.img,
                                         this.background.x, y,
                                         this.background.width, this.background.height);

                    y += this.background.height - 1; // -1, because of the gap        
                }

                // character
                this.layer.drawImage(this.character.img,
                                     this.character.x,
                                     this.character.y,
                                     this.character.width,
                                     this.character.height);

                // obstacles
                $.each(this.obstacles, function(index, value)
                {
                    that.layer.drawImage(value.img,
                                         value.x,
                                         value.y,
                                         value.width,
                                         value.height);
                });

                // text
                this.layer
                    .fillStyle("#FFFFFF")
                    .font("16px Arial")
                    .wrappedText("Time:  " + Math.floor(this.time).toString() + "s", 5, 16)
                    .wrappedText("Score: " + Math.floor(this.score).toString(), 5, 40);

                // countdown
                if (this.state == this.states.countdown)
                {
                    this.layer
                        .font("200px Arial");

                    var text = Math.abs(Math.floor(this.time)).toString();
                    textboundaries = this.layer.textBoundaries(text);

                    this.layer
                        .fillStyle("#FFFFFF")
                        .wrappedText(text, (this.width - textboundaries.width) / 2, (this.height + textboundaries.height) / 2);
                }

                // pause
                if (this.state == this.states.pause)
                {
                    this.layer
                        .font("100px Arial");

                    var text = "Pause";
                    textboundaries = this.layer.textBoundaries(text);

                    this.layer
                        .fillStyle("#FFFFFF")
                        .wrappedText(text, (this.width - textboundaries.width) / 2, (this.height + textboundaries.height) / 2);
                }
            },

            collision: function()
            {
                this.state = this.states.gameover;
                $(this.container).html("");

                // leaderboard
                Screen.show("gameplay-gameover", Math.floor(this.score));
            },

            getSpeedFactor: function()
            {
                return Math.pow(this.obstacle.speed_factor, Math.floor(this.time / this.obstacle.speed_time));
            }
        });
    },

    start: function()
    {
        this.game.state = this.game.states.countdown;
    },

    pause: function()
    {
        if (this.game.state == this.game.states.running)
        {
            this.game.state = this.game.states.pause;
        }
        else if (this.game.state == this.game.states.pause)
        {
            this.game.state = this.game.states.running;
        }   
    }
};

});